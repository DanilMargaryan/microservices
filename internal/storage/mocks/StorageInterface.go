// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	storage "github.com/DanilMargaryan/microservices/internal/storage"
	mock "github.com/stretchr/testify/mock"
)

// StorageInterface is an autogenerated mock type for the StorageInterface type
type StorageInterface struct {
	mock.Mock
}

// CreateBeverage provides a mock function with given fields: ctx, newBeverage
func (_m *StorageInterface) CreateBeverage(ctx context.Context, newBeverage storage.Beverage) error {
	ret := _m.Called(ctx, newBeverage)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.Beverage) error); ok {
		r0 = rf(ctx, newBeverage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllBeverages provides a mock function with given fields: ctx
func (_m *StorageInterface) GetAllBeverages(ctx context.Context) ([]storage.Beverage, error) {
	ret := _m.Called(ctx)

	var r0 []storage.Beverage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]storage.Beverage, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []storage.Beverage); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.Beverage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBeverage provides a mock function with given fields: ctx, id
func (_m *StorageInterface) GetBeverage(ctx context.Context, id int) (*storage.Beverage, error) {
	ret := _m.Called(ctx, id)

	var r0 *storage.Beverage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*storage.Beverage, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *storage.Beverage); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.Beverage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewStorageInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewStorageInterface creates a new instance of StorageInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorageInterface(t mockConstructorTestingTNewStorageInterface) *StorageInterface {
	mock := &StorageInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
