package main

import (
	"context"
	"github.com/DanilMargaryan/microservices/internal/config"
	"github.com/DanilMargaryan/microservices/internal/storage"
	"github.com/gofiber/fiber/v3"
	"log"
)

func main() {
	cfg := config.MustLoad()

	stg, err := storage.New(cfg)

	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}
	defer stg.Close()

	app := fiber.New()

	app.Get("/", func(ctx fiber.Ctx) error {
		return ctx.SendString("Hello, World üëã!")
	})

	app.Get("/beverages", func(ctx fiber.Ctx) error {
		beverages, err := stg.GetAllBeverages(context.Background())
		if err != nil {
			return ctx.Status(500).SendString("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
		}
		return ctx.JSON(beverages)
	})

	app.Post("/newbeverage", func(ctx fiber.Ctx) error {
		var newBeverage storage.Beverage

		if err := ctx.Bind().Body(&newBeverage); err != nil {
			return ctx.Status(400).SendString("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞")
		}

		if err := stg.CreateBeverage(context.Background(), newBeverage); err != nil {
			return ctx.Status(500).SendString("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–∏—Ç–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
		}

		return ctx.Status(201).SendString("–ù–∞–ø–∏—Ç–æ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
	})

	log.Fatal(app.Listen(":3000"))
}
